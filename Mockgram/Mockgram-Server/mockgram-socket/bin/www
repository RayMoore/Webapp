#!/usr/bin/env node

/**
 * Module dependencies.
 */

const app = require('../app').app;
const sessionMiddleWare = require('../app').sessionMiddleWare;
const socketIo = require('socket.io');
const debug = require('debug')('socket-mockgram-server:server');
const http = require('http');

/**
 * Get port from environment and store in Express.
 */

let port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

const server = http.createServer(app);
const io = socketIo(server);

io.use(function (socket, next) {
  sessionMiddleWare(socket.request, socket.request.res, next);
});

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);
io.on('connection', function (socket) {
  console.log('A client has connected');
  let session = socket.request.session;
  if (session) {
    //store actual socket of connected user in order to access it easily
    //from other modules e.g. from router
    let user = session.passport.user;
    userSockets[user] = socket;
    console.log(`user: ${user} connected and socket stored`);
    //on disconnect
    socket.on('disconnect', function () {
      delete userSockets[user];
      return console.log(`user: ${user} has disconnected`);
    });
  } else {
    socket.disconnect();
  }
});

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string' ?
    'Pipe ' + port :
    'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string' ?
    'pipe ' + addr :
    'port ' + addr.port;
  debug('Listening on ' + bind);
}